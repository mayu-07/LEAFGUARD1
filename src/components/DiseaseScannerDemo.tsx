import { useState } from 'react';
import { Upload, Camera, Loader2, CheckCircle, AlertTriangle, Info } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';

export const DiseaseScannerDemo = () => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanComplete, setScanComplete] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);

  const mockAnalysis = {
    disease: '‡§¨‡•à‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§Ø‡§≤ ‡§¨‡•ç‡§≤‡§æ‡§á‡§ü (Bacterial Blight)',
    confidence: 92,
    severity: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ',
    cropType: '‡§ß‡§æ‡§® (Rice)',
    affectedArea: '35%',
    recommendations: [
      '‡§ï‡•â‡§™‡§∞ ‡§∏‡§≤‡•ç‡§´‡•á‡§ü ‡§ï‡§æ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç (2 ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡•Ä‡§ü‡§∞)',
      '‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
      '15 ‡§¶‡§ø‡§® ‡§¨‡§æ‡§¶ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç',
      '‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç'
    ],
    prevention: [
      '‡§¨‡•Ä‡§ú ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§∏‡•á ‡§ü‡•ç‡§∞‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç',
      '‡§ï‡•ç‡§∞‡•â‡§™ ‡§∞‡•ã‡§ü‡•á‡§∂‡§® ‡§ï‡§∞‡•á‡§Ç',
      '‡§â‡§ö‡§ø‡§§ ‡§¶‡•Ç‡§∞‡•Ä ‡§™‡§∞ ‡§∞‡•ã‡§™‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç'
    ]
  };

  const startScan = () => {
    setIsScanning(true);
    setScanComplete(false);
    setScanProgress(0);

    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanComplete(true);
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case '‡§ï‡§Æ': return 'bg-success';
      case '‡§Æ‡§ß‡•ç‡§Ø‡§Æ': return 'bg-warning';
      case '‡§Ö‡§ß‡§ø‡§ï': return 'bg-destructive';
      default: return 'bg-muted';
    }
  };

  return (
    <section className="py-20 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-foreground mb-4">
            ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®
          </h2>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            ‡§¶‡•á‡§ñ‡§ø‡§è ‡§ï‡•à‡§∏‡•á ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§™‡§π‡§ö‡§æ‡§®‡§§‡•Ä ‡§π‡•à
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          <div className="grid lg:grid-cols-2 gap-8 items-start">
            {/* Upload Section */}
            <Card className="h-fit sticky top-4">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Camera className="h-5 w-5 text-primary" />
                  ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
                </CardTitle>
                <CardDescription>
                  ‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="border-2 border-dashed border-border rounded-lg p-8 text-center mb-6 hover:border-primary transition-colors cursor-pointer">
                  <Upload className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground mb-2">‡§Ø‡§π‡§æ‡§Å ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§´‡•ã‡§ü‡•ã ‡§°‡•ç‡§∞‡•à‡§ó ‡§ï‡§∞‡•á‡§Ç</p>
                  <p className="text-sm text-muted-foreground">JPG, PNG, GIF - ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 10MB</p>
                </div>

                <div className="space-y-4">
                  <Button 
                    variant="hero" 
                    className="w-full" 
                    onClick={startScan}
                    disabled={isScanning}
                  >
                    {isScanning ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ú‡§æ‡§∞‡•Ä ‡§π‡•à...
                      </>
                    ) : (
                      <>
                        <Camera className="h-4 w-4 mr-2" />
                        ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§®‡§ø‡§¶‡§æ‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
                      </>
                    )}
                  </Button>

                  {isScanning && (
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§ú‡§æ‡§∞‡•Ä ‡§π‡•à...</span>
                        <span>{scanProgress}%</span>
                      </div>
                      <Progress value={scanProgress} className="h-2" />
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Results Section */}
            <Card className="h-fit sticky top-4">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5 text-success" />
                  ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü
                </CardTitle>
              </CardHeader>
              <CardContent>
                {!scanComplete ? (
                  <div className="text-center py-12 text-muted-foreground">
                    <Info className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>‡§®‡§ø‡§¶‡§æ‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§æ‡§è‡§Ç ‡§§‡§∞‡§´ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç</p>
                  </div>
                ) : (
                  <div className="space-y-6 animate-fade-in-up">
                    {/* Disease Info */}
                    <div>
                      <h3 className="font-semibold text-lg mb-3">‡§™‡§π‡§ö‡§æ‡§®‡•Ä ‡§ó‡§à ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä</h3>
                      <div className="bg-muted p-4 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-primary">{mockAnalysis.disease}</span>
                          <Badge variant="outline">{mockAnalysis.confidence}% ‡§∏‡§ü‡•Ä‡§ï</Badge>
                        </div>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">‡§´‡§∏‡§≤: </span>
                            <span className="font-medium">{mockAnalysis.cropType}</span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: </span>
                            <span className="font-medium">{mockAnalysis.affectedArea}</span>
                          </div>
                        </div>
                        <div className="mt-3 flex items-center gap-2">
                          <span className="text-muted-foreground text-sm">‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ:</span>
                          <Badge className={`${getSeverityColor(mockAnalysis.severity)} text-white`}>
                            {mockAnalysis.severity}
                          </Badge>
                        </div>
                      </div>
                    </div>

                    <Separator />

                    {/* Recommendations */}
                    <div>
                      <h4 className="font-semibold mb-3 text-success">üå± ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ</h4>
                      <ul className="space-y-2">
                        {mockAnalysis.recommendations.map((rec, index) => (
                          <li key={index} className="flex items-start gap-2 text-sm">
                            <CheckCircle className="h-4 w-4 text-success mt-0.5 flex-shrink-0" />
                            <span>{rec}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    <Separator />

                    {/* Prevention */}
                    <div>
                      <h4 className="font-semibold mb-3 text-primary">üõ°Ô∏è ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§¨‡§ö‡§æ‡§µ</h4>
                      <ul className="space-y-2">
                        {mockAnalysis.prevention.map((prev, index) => (
                          <li key={index} className="flex items-start gap-2 text-sm">
                            <AlertTriangle className="h-4 w-4 text-warning mt-0.5 flex-shrink-0" />
                            <span>{prev}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    <Button variant="outline" className="w-full">
                      ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </section>
  );
};