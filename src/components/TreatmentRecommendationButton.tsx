import React, { useState, useCallback } from 'react';
import { ChevronDown, ChevronUp, Copy, Check, Download, Share2 } from 'lucide-react';
import { EnhancedButton } from '@/components/ui/enhanced-button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { toast } from '@/components/ui/sonner';

interface TreatmentData {
  disease: string;
  confidence: number;
  severity: '‡§ï‡§Æ' | '‡§Æ‡§ß‡•ç‡§Ø‡§Æ' | '‡§Ö‡§ß‡§ø‡§ï';
  cropType: string;
  affectedArea: string;
  recommendations: string[];
  prevention: string[];
  medicines?: {
    name: string;
    dosage: string;
    frequency: string;
  }[];
}

interface TreatmentRecommendationButtonProps {
  treatmentData: TreatmentData;
  className?: string;
}

export const TreatmentRecommendationButton: React.FC<TreatmentRecommendationButtonProps> = ({
  treatmentData,
  className
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case '‡§ï‡§Æ': return 'bg-success';
      case '‡§Æ‡§ß‡•ç‡§Ø‡§Æ': return 'bg-warning';
      case '‡§Ö‡§ß‡§ø‡§ï': return 'bg-destructive';
      default: return 'bg-muted';
    }
  };

  // Copy to clipboard functionality
  const copyToClipboard = useCallback(async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(section);
      toast.success(`${section} ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ`);
      
      // Reset copied state after 2 seconds
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      toast.error('‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø');
    }
  }, []);

  // Generate full report text
  const generateFullReport = useCallback(() => {
    const report = `
üå± ‡§π‡§∞‡§ø‡§§ ‡§∏‡§π‡§æ‡§Ø‡§ï - ‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü

üìã ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:
‚Ä¢ ‡§∞‡•ã‡§ó: ${treatmentData.disease}
‚Ä¢ ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ: ${treatmentData.confidence}%
‚Ä¢ ‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ: ${treatmentData.severity}
‚Ä¢ ‡§´‡§∏‡§≤: ${treatmentData.cropType}
‚Ä¢ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: ${treatmentData.affectedArea}

üíä ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ:
${treatmentData.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

üõ°Ô∏è ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§¨‡§ö‡§æ‡§µ:
${treatmentData.prevention.map((prev, i) => `${i + 1}. ${prev}`).join('\n')}

${treatmentData.medicines ? `
üíâ ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å:
${treatmentData.medicines.map(med => `‚Ä¢ ${med.name} - ${med.dosage} (${med.frequency})`).join('\n')}
` : ''}

üìÖ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§§‡§æ‡§∞‡•Ä‡§ñ: ${new Date().toLocaleDateString('hi-IN')}
üîó ‡§π‡§∞‡§ø‡§§ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§§‡•à‡§Ø‡§æ‡§∞
    `.trim();
    
    return report;
  }, [treatmentData]);

  // Download report as text file
  const downloadReport = useCallback(() => {
    const report = generateFullReport();
    const blob = new Blob([report], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `‡§´‡§∏‡§≤-‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    toast.success('‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à');
  }, [generateFullReport]);

  // Share report
  const shareReport = useCallback(async () => {
    const report = generateFullReport();
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: '‡§π‡§∞‡§ø‡§§ ‡§∏‡§π‡§æ‡§Ø‡§ï - ‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü',
          text: report,
        });
        toast.success('‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§æ‡§ù‡§æ ‡§ï‡•Ä ‡§ó‡§à');
      } catch (err) {
        if ((err as Error).name !== 'AbortError') {
          copyToClipboard(report, '‡§™‡•Ç‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü');
        }
      }
    } else {
      copyToClipboard(report, '‡§™‡•Ç‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü');
    }
  }, [generateFullReport, copyToClipboard]);

  // Handle keyboard navigation
  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      setIsExpanded(!isExpanded);
    }
  }, [isExpanded]);

  return (
    <div className={className}>
      {/* Main toggle button */}
      <EnhancedButton
        variant="outline"
        onClick={() => setIsExpanded(!isExpanded)}
        onKeyDown={handleKeyDown}
        trackingAction="treatment_recommendation_toggle"
        className="w-full justify-between"
        aria-expanded={isExpanded}
        aria-controls="treatment-details"
        aria-label={`‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ${isExpanded ? '‡§õ‡•Å‡§™‡§æ‡§è‡§Ç' : '‡§¶‡•á‡§ñ‡•á‡§Ç'}`}
      >
        <span className="flex items-center gap-2">
          <span className="font-medium">‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§ñ‡•á‡§Ç</span>
          <Badge variant="outline">{treatmentData.confidence}% ‡§∏‡§ü‡•Ä‡§ï</Badge>
        </span>
        {isExpanded ? (
          <ChevronUp className="h-4 w-4" />
        ) : (
          <ChevronDown className="h-4 w-4" />
        )}
      </EnhancedButton>

      {/* Expanded content */}
      {isExpanded && (
        <Card 
          id="treatment-details" 
          className="mt-4 animate-fade-in-up"
          role="region"
          aria-label="‡§â‡§™‡§ö‡§æ‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£"
        >
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</span>
              <div className="flex gap-2">
                <EnhancedButton
                  variant="ghost"
                  size="sm"
                  onClick={downloadReport}
                  trackingAction="download_treatment_report"
                  aria-label="‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"
                >
                  <Download className="h-4 w-4" />
                </EnhancedButton>
                <EnhancedButton
                  variant="ghost"
                  size="sm"
                  onClick={shareReport}
                  trackingAction="share_treatment_report"
                  aria-label="‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç"
                >
                  <Share2 className="h-4 w-4" />
                </EnhancedButton>
              </div>
            </CardTitle>
          </CardHeader>
          
          <CardContent className="space-y-6">
            {/* Disease Information */}
            <div>
              <h4 className="font-semibold text-lg mb-3 flex items-center justify-between">
                ‡§™‡§π‡§ö‡§æ‡§®‡•Ä ‡§ó‡§à ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä
                <EnhancedButton
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(
                    `‡§∞‡•ã‡§ó: ${treatmentData.disease}\n‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ: ${treatmentData.confidence}%\n‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ: ${treatmentData.severity}`,
                    '‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä'
                  )}
                  trackingAction="copy_disease_info"
                  aria-label="‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç"
                >
                  {copiedSection === '‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä' ? (
                    <Check className="h-4 w-4 text-success" />
                  ) : (
                    <Copy className="h-4 w-4" />
                  )}
                </EnhancedButton>
              </h4>
              
              <div className="bg-muted p-4 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <span className="font-medium text-primary">{treatmentData.disease}</span>
                  <Badge variant="outline">{treatmentData.confidence}% ‡§∏‡§ü‡•Ä‡§ï</Badge>
                </div>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-muted-foreground">‡§´‡§∏‡§≤: </span>
                    <span className="font-medium">{treatmentData.cropType}</span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞: </span>
                    <span className="font-medium">{treatmentData.affectedArea}</span>
                  </div>
                </div>
                <div className="mt-3 flex items-center gap-2">
                  <span className="text-muted-foreground text-sm">‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ:</span>
                  <Badge className={`${getSeverityColor(treatmentData.severity)} text-white`}>
                    {treatmentData.severity}
                  </Badge>
                </div>
              </div>
            </div>

            <Separator />

            {/* Treatment Recommendations */}
            <div>
              <h4 className="font-semibold mb-3 text-success flex items-center justify-between">
                üå± ‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ
                <EnhancedButton
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(
                    treatmentData.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n'),
                    '‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ'
                  )}
                  trackingAction="copy_treatment_recommendations"
                  aria-label="‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç"
                >
                  {copiedSection === '‡§â‡§™‡§ö‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ' ? (
                    <Check className="h-4 w-4 text-success" />
                  ) : (
                    <Copy className="h-4 w-4" />
                  )}
                </EnhancedButton>
              </h4>
              <ul className="space-y-2">
                {treatmentData.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <span className="flex-shrink-0 w-6 h-6 bg-success text-success-foreground rounded-full flex items-center justify-center text-xs font-medium">
                      {index + 1}
                    </span>
                    <span>{rec}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Medicines if available */}
            {treatmentData.medicines && (
              <>
                <Separator />
                <div>
                  <h4 className="font-semibold mb-3 text-primary flex items-center justify-between">
                    üíä ‡§∏‡•Å‡§ù‡§æ‡§à ‡§ó‡§à ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å
                    <EnhancedButton
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(
                        treatmentData.medicines!.map(med => `${med.name} - ${med.dosage} (${med.frequency})`).join('\n'),
                        '‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å'
                      )}
                      trackingAction="copy_medicines"
                      aria-label="‡§¶‡§µ‡§æ‡§á‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç"
                    >
                      {copiedSection === '‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å' ? (
                        <Check className="h-4 w-4 text-success" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </EnhancedButton>
                  </h4>
                  <div className="space-y-3">
                    {treatmentData.medicines.map((medicine, index) => (
                      <div key={index} className="bg-muted p-3 rounded-lg">
                        <div className="font-medium text-primary mb-1">{medicine.name}</div>
                        <div className="text-sm text-muted-foreground">
                          <span className="font-medium">‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ:</span> {medicine.dosage} | 
                          <span className="font-medium ml-2">‡§Ü‡§µ‡•É‡§§‡•ç‡§§‡§ø:</span> {medicine.frequency}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </>
            )}

            <Separator />

            {/* Prevention Tips */}
            <div>
              <h4 className="font-semibold mb-3 text-primary flex items-center justify-between">
                üõ°Ô∏è ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§¨‡§ö‡§æ‡§µ
                <EnhancedButton
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(
                    treatmentData.prevention.map((prev, i) => `${i + 1}. ${prev}`).join('\n'),
                    '‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á'
                  )}
                  trackingAction="copy_prevention_tips"
                  aria-label="‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç"
                >
                  {copiedSection === '‡§¨‡§ö‡§æ‡§µ ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á' ? (
                    <Check className="h-4 w-4 text-success" />
                  ) : (
                    <Copy className="h-4 w-4" />
                  )}
                </EnhancedButton>
              </h4>
              <ul className="space-y-2">
                {treatmentData.prevention.map((prev, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <span className="flex-shrink-0 w-6 h-6 bg-warning text-warning-foreground rounded-full flex items-center justify-center text-xs font-medium">
                      {index + 1}
                    </span>
                    <span>{prev}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Action buttons */}
            <div className="flex gap-2 pt-4">
              <EnhancedButton
                variant="hero"
                onClick={() => copyToClipboard(generateFullReport(), '‡§™‡•Ç‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü')}
                trackingAction="copy_full_report"
                className="flex-1"
              >
                {copiedSection === '‡§™‡•Ç‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü' ? (
                  <>
                    <Check className="h-4 w-4" />
                    ‡§ï‡•â‡§™‡•Ä ‡§π‡•ã ‡§ó‡§Ø‡§æ
                  </>
                ) : (
                  <>
                    <Copy className="h-4 w-4" />
                    ‡§™‡•Ç‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç
                  </>
                )}
              </EnhancedButton>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};